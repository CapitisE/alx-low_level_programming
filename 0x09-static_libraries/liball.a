!<arch>
0-isupper.c/    0           0     0     644     251       `
#include "main.h"

/**
 * _isupper - Program to check for uppercase characters
 * @c: Prototype character
 * Return: 1 if c is uppercase, 0 otherwise
 *
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
	return (1);
	}
	else
	{
	return (0);
	}
}

0-memset.c/     0           0     0     644     325       `
#include "main.h"

/**
 * _memset - Function to fill memory with a constant byte
 * @s: Starting address of memory to be filled
 * @n: Number of bytes
 * @b: Constant
 * Return: Array s
 *
 */

char *_memset(char *s, char b, unsigned int n)
{
	int byte = 0;

	for (; n > 0; byte++)
	{
		s[byte] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     336       `
#include "main.h"

/**
 * _strcat - Function to concatenate two strings
 * @dest: input value
 * @src: input value
 * Return: void
 *
 */

char *_strcat(char *dest, char *src)
{
	int a, b;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}
	for (b = 0; src[b] != '\0'; a++, b++)
	{
		dest[a] = src[b];
	}
	dest[a] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     603       `
#include "main.h"

/**
 * _atoi - Function to convert a string to an integer
 * @s: String to be converted
 * Return: the integer converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;
		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}
	if (f == 0)
		return (0);
	return (n);
}

1-isdigit.c/    0           0     0     644     244       `
#include "main.h"

/**
 * _isdigit - Program to check for a digit from 0 to 9
 * @c: Protoype number
 * Return: 1 if c is a digit, 0 otherwise
 *
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
	return (1);
	}
	else
	{
	return (0);
	}
}
1-memcpy.c/     0           0     0     644     349       `
#include "main.h"

/**
 * _memcpy - Function to copy memory area
 * @dest: Destination variable
 * @src: Area of copy
 * @n: Number of bytes
 *
 * Return: Pointer to location dest
 *
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int copy = 0, a = n;

	for (; copy < a; copy++)
	{
		dest[copy] = src[copy];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     446       `
#include "main.h"

/**
 * _strncat - Function to concatenate two strings
 * @dest: Destination string pointer
 * @src: Source string pointer
 * @n: Number of bytes to be concatenated
 * Return: pointer to destination string
 *
 */

char *_strncat(char *dest, char *src, int n)
{
	int a, b;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}
	for (b = 0; b < n && src[b] != '\0'; a++, b++)
	{
		dest[a] = src[b];
	}
	dest[a] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     335       `
#include "main.h"

/**
 * _strchr - Function that locates a character in a string
 * @s: String
 * @c: Character
 * Return: pointer to the first occurence of the character
 *
 */

char *_strchr(char *s, char c)
{
	int locate = 0;

	for (; s[locate] >= '\0'; locate++)
	{
		if (s[locate] == c)
			return (&s[locate]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     216       `
#include "main.h"
/**
 * _strlen - Function to return the length of a string
 * @s: string
 * Return: length
 */
int _strlen(char *s)
{
	int longi = 0;

	while (*s != '\0')
	{
		longi++;
		s++;
	}
	return (longi);
}
2-strncpy.c/    0           0     0     644     383       `
#include "main.h"

/**
 * _strncpy - Function to copy a string
 * @dest: Destination string pointer
 * @src: Source string pointer
 * @n: Number of bytes to be used
 * Return: void
 *
 */

char *_strncpy(char *dest, char *src, int n)
{
	int a;

	a = 0;
	while (a < n && src[a] != '\0')
	{
		dest[a] = src[a];
		a++;
	}
	while (a < n)
	{
		dest[a] = '\0';
		a++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     259       `
#include "main.h"

/**
 * _islower - Program to check for lowercase character
 * @c: Serves a protype
 * Return: 1 (if int c is lowercase), 0 (in all other conditions)
 *
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
	return (1);
	}

	return (0);
}

3-puts.c/       0           0     0     644     187       `
#include "main.h"

/**
 * _puts - Function to print a string to stdout
 * @str: string
 *
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
		_putchar('\n');
}

3-strcmp.c/     0           0     0     644     314       `
#include "main.h"

/**
 * _strcmp - Function to compare two strings
 * @s1: Input value
 * @s2: Input value
 * Return: 0 (Successful)
 *
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     450       `
#include "main.h"

/**
 * _strspn - Function to get the length of a prefix substring
 * @s: Input value
 * @accept: Input value
 *
 * Return: Number of bytes in the initial segment of s
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int a = 0;
	int b;

	while (*s)
	{
		for (b = 0; accept[b]; b++)
		{
			if (*s == accept[b])
			{
				a++;
				break;
			}
			else if (accept[b + 1] == '\0')
				return (a);
		}
		s++;
	}
	return (a);
}
4-isalpha.c/    0           0     0     644     280       `
#include "main.h"

/**
 *  _isalpha - Program to check for alphabetic characters
 *  @c: Prototype for program
 *  Return: 1 (if c is a letter), 0 (in other cases)
 *
 */

int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
	return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     363       `
#include "main.h"

/**
 * _strpbrk - Function to search for a string for any set of bytes
 * @s: Location of storage
 * @accept: Location of storage
 *
 * Return: Pointer to the byte in s
 *
 */

char *_strpbrk(char *s, char *accept)
{
	int x;

	while (*s)
	{
		for (x = 0; accept[x]; x++)
		{
			if (*s == accept[x])
				return (s);
		}
		s++;
	}
	return (0);
}

5-strstr.c/     0           0     0     644     456       `
#include "main.h"

/**
 * _strstr - Function to locate a substring
 * @haystack: String
 * @needle: Substring
 * Return: Pointer to the beginning of the located substring
 * or NULL, if substring is not found
 *
 */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *h = haystack, *n = needle;

		while (*h == *n && *n != '\0')
		{
			h++;
			n++;
		}
		if (*n == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     269       `
#include "main.h"

/**
 * _abs - Program to compute the absolute value of an integer
 * @n: Prototype for program
 * Return: Absolute number (Successful)
 *
 */

int _abs(int n)
{
	if (n < 0)
	{
	int absolute;

	absolute = n * -1;
	return (absolute);
	}
	return (n);
}

9-strcpy.c/     0           0     0     644     328       `
#include "main.h"

/**
 * char *_strcpy - Function to copy the string pointed to by src
 * @dest: Copy to
 * @src: Copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
	int l = 0, x = 0;

	while (*(src + l) != '\0')
	{
		l++;
	}
	for (; x < l; x++)
	{
		dest[x] = src[x];
	}
	dest[l] = '\0';
	return (dest);
}
main.c/         0           0     0     644     150       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	        return (0);
}
_putchar.c/     0           0     0     644     232       `
#include <unistd.h>
#include <stdlib.h>

/**
 * _putchar - Function to send standard character to output
 * @c: Character to print
 * Return: 1 if successful, -1 otherwise
 *
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
